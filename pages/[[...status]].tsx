// This page is dynamic route https://nextjs.org/docs/api-routes/dynamic-api-routes
import Head from "next/head";
import { useRouter } from "next/router";
import CreateTaskForm from "../componens/CreateTaskForm";
import TaskFilter from "../componens/TaskFilter";
import TaskList from "../componens/TaskList";
import Error from "next/error";
import {
  TasksDocument,
  TasksQuery,
  TasksQueryVariables,
  TaskStatus,
  useTasksQuery,
} from "../generated/graphql-frontend";
import { initializeApollo } from "../lib/client";
import { GetServerSideProps } from "next";
import { useEffect, useRef } from "react";
import Custom404 from "./404";

const isTaskStatus = (value: string): value is TaskStatus =>
  Object.values(TaskStatus).includes(value as TaskStatus);

export default function Home() {
  const router = useRouter();

  //console.log(router.query?.status);

  const status =
    Array.isArray(router.query?.status) && router.query?.status.length
      ? router.query?.status[0]
      : undefined;

  const prevStatus = useRef(status);
  useEffect(() => {
    prevStatus.current = status;
  }, [status]);

  if (status !== undefined && !isTaskStatus(status)) {
    return <Custom404 />;
  }
  const result = useTasksQuery({
    variables: { status },
    fetchPolicy:
      status !== prevStatus.current ? "cache-and-network" : "cache-first",
  });
  const data = result.data;
  const loading = result.loading;
  const error = result.error;
  const tasks = data?.tasks;
  return (
    <div>
      <Head>
        <title>Tasks</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CreateTaskForm
        onSuccess={() => {
          result.refetch();
        }}
      />
      {loading && !tasks ? (
        <p>Loading tasks...</p>
      ) : error ? (
        <p>An error occurred.</p>
      ) : tasks && tasks.length > 0 ? (
        <TaskList tasks={tasks} />
      ) : (
        <p className="no-tasks-message">You've got no tasks.</p>
      )}
      <TaskFilter status={status} />
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  console.log(context.params?.status);
  const status =
    typeof context.params?.status === "string"
      ? context.params.status
      : undefined;
  if (status === undefined || isTaskStatus(status)) {
    const apolloClient = initializeApollo();
    await apolloClient.query<TasksQuery, TasksQueryVariables>({
      query: TasksDocument,
      variables: { status: status },
    });
    return {
      props: {
        initialApolloState: apolloClient.cache.extract(),
      },
    };
  }
  return { props: {} };
};
